import React, { Component } from "react";
import {
  changeKey,
  fetchTable,
  getAutoGeneratedNamesForKey,
  updateAutoGeneratedNamesForKey,
  updateChildColumnFkProperty
} from "../actions/tables";
import { finishTransaction, startTransaction } from "../actions/undoredo";

import { UndoRedoDef } from "../helpers/history/undo_redo_transaction_defs";
import _ from "lodash";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";
import { fetchRelation } from "../actions/relations";
import { getHistoryContext } from "../helpers/history/history";
import { v4 as uuidv4 } from "uuid";
import { withRouter } from "react-router-dom";

class RelationKey extends Component {
  getKeyDetail(tablecols, selectedcol) {
    return tablecols.map((col) => {
      return (
        <option value={col.id} key={col.id}>
          {col.name} {/*col.id*/}
        </option>
      );
    });
  }

  getSelect(tablecols, selectedcol) {
    return (
      <select
        value={selectedcol}
        onChange={this.changeChildCol.bind(this, selectedcol)}
      >
        {this.getKeyDetail(tablecols)}
      </select>
    );
  }

  getKeyColumns() {
    var parent =
      this.props.tables[
        this.props.relations[this.props.match.params.rid].parent
      ];
    var child =
      this.props.tables[
        this.props.relations[this.props.match.params.rid].child
      ];
    var relCols = this.props.relations[this.props.match.params.rid].cols;
    return relCols.map((relCol) => {
      var c = _.find(parent.cols, ["id", relCol.parentcol]);
      var ch = _.find(child.cols, ["id", relCol.childcol]);

      return (
        <div key={relCol.id + uuidv4()}>
          <div className="im-rel-key-col-grid">
            {c ? <div>{c.name}</div> : ""}
            {ch ? this.getSelect(child.cols, ch.id) : <div />}
          </div>
        </div>
      );
    });
  }

  async handleChangeKey(event) {
    const value = event.target.value;
    await this.props.startTransaction(
      getHistoryContext(this.props.history, this.props.match),
      UndoRedoDef.RELATION_KEY__CHANGE_KEY
    );
    try {
      await this.props.changeKey(value, this.props.match.params.rid);
    } finally {
      await this.props.finishTransaction();
    }
  }

  async changeChildCol(col_id, event) {
    const value = event.target.value;
    await this.props.startTransaction(
      getHistoryContext(this.props.history, this.props.match),
      UndoRedoDef.RELATION_KEY__CHANGE_CHILD_COL
    );
    try {
      const relation = this.props.relations[this.props.match.params.rid];
      const parent = this.props.tables[relation.parent];
      const key = _.find(parent.keys, ["id", relation.parent_key]);
      const autoGeneratedNames = getAutoGeneratedNamesForKey({
        settings: {
          type: this.props.type,
          nameAutoGeneration: this.props.nameAutoGeneration
        },
        tables: this.props.tables,
        table: parent,
        key: key,
        relations: this.props.relations
      });
      try {
        var r = _.cloneDeep(this.props.relations[this.props.match.params.rid]);
        var cht = _.cloneDeep(this.props.tables[r.child]);
        var c = _.find(r.cols, ["childcol", col_id]);
        c.childcol = value;

        await this.props.fetchTable(cht);
        await this.props.fetchRelation(r);

        await this.props.updateChildColumnFkProperty(r.child, col_id);
        await this.props.updateChildColumnFkProperty(r.child, value);
      } finally {
        await this.props.updateAutoGeneratedNamesForKey(autoGeneratedNames);
      }
    } finally {
      await this.props.finishTransaction();
    }
  }

  renderKeys() {
    var parentTable =
      this.props.tables[
        this.props.relations[this.props.match.params.rid].parent
      ];
    return (
      parentTable &&
      parentTable.keys.map((key) => {
        return (
          <option value={key.id} key={key.id}>
            {key.name}
          </option>
        );
      })
    );
  }

  render() {
    return (
      <div>
        <div className="im-properties-grid">
          <div>Key: </div>
          <select
            value={this.props.relations[this.props.match.params.rid].parent_key}
            onChange={this.handleChangeKey.bind(this)}
          >
            {this.renderKeys()}
          </select>
          <div>Columns: </div>
          <div>{this.getKeyColumns()}</div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    type: state.model.type,
    nameAutoGeneration: state.model.nameAutoGeneration,
    relations: state.relations,
    tables: state.tables
  };
}

function mapDispatchToProps(dispatch) {
  return {
    ...bindActionCreators(
      {
        fetchRelation,
        fetchTable,
        finishTransaction,
        startTransaction,
        updateChildColumnFkProperty,
        changeKey,
        updateAutoGeneratedNamesForKey
      },
      dispatch
    ),
    dispatch
  };
}

export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(RelationKey)
);
